{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["images","App","React","useState","rotation","selectedIndex","selected","selectedImages","spinner","spinnerSet","useEffect","window","setInterval","sp","out","length","style","margin","display","gridTemplateColumns","width","map","img","textAlign","src","opacity","includes","borderRadius","backgroundColor","padding","onClick","filter","i","fontSize","border","marginTop","Math","floor","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAGMA,G,MAAS,CACb,YACA,eACA,WACA,cACA,WACA,YACA,cAiGaC,MA9Ff,WAAgB,IAAD,EACiBC,IAAMC,SAAS,CAC3CC,SAAU,EACVC,cAAe,EACfC,SAAU,KACVC,eAAgB,CAAC,WAAY,cAAe,eALjC,mBACNC,EADM,KACGC,EADH,KA0Bb,OAlBAP,IAAMQ,WAAU,WACdC,OAAOC,aAAY,WACjBH,GAAW,SAACI,GACV,GAAIA,EAAGT,SAAW,EAAG,CACnB,IAAMU,EAAG,eACJD,GAML,OAJAC,EAAIV,UAAY,EAChBU,EAAIT,cAAgBS,EAAIT,cAAgB,EACxCS,EAAIR,SACFQ,EAAIP,eAAeO,EAAIT,cAAgBS,EAAIP,eAAeQ,QACrDD,EAET,OAAOD,OAER,OACF,IAGD,sBACEG,MAAO,CACLC,OAAQ,OAFZ,UAKE,qBACED,MAAO,CACLE,QAAS,OACTC,oBAAqB,iBACrBC,MAAO,QAJX,SAOGpB,EAAOqB,KAAI,SAACC,GAAD,OACV,qBACEN,MAAO,CACLO,UAAW,UAFf,SAME,qBACEC,IAAKF,EACLN,MAAO,CACLS,QAASjB,EAAQD,eAAemB,SAASJ,GAAO,EAAI,GACpDL,OAAQ,SACRU,aAAc,MACdC,gBAAiBpB,EAAQF,WAAagB,EAAM,YAAc,KAC1DO,QAAS,UAEXC,QAAS,WACP,IAAMvB,EAAiBC,EAAQD,eAAemB,SAASJ,GACnDd,EAAQD,eAAewB,QAAO,SAACC,GAAD,OAAOA,IAAMV,KADxB,sBAEfd,EAAQD,gBAFO,CAESe,IAChCb,EAAW,2BACND,GADK,IAERD,wBAjBDe,QAwBX,wBACEN,MAAO,CACLI,MAAO,OACPa,SAAU,WACVJ,QAAS,QACTF,aAAc,QACdO,OAAQ,EACRN,gBAAiB,QACjBO,UAAW,SAEbL,QAAS,WACPrB,EAAW,2BACND,GADK,IAERJ,SAAUgC,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,GAC1CjC,cAAe+B,KAAKC,MAClBD,KAAKE,SAAW9B,EAAQD,eAAeQ,YAf/C,wBCrESwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8fd7d7c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst images = [\n  \"bjorn.png\",\n  \"mountain.png\",\n  \"berg.png\",\n  \"gnorman.png\",\n  \"luna.png\",\n  \"windy.png\",\n  \"jimmy.png\",\n];\n\nfunction App() {\n  const [spinner, spinnerSet] = React.useState({\n    rotation: 0,\n    selectedIndex: 0,\n    selected: null,\n    selectedImages: [\"luna.png\", \"gnorman.png\", \"jimmy.png\"],\n  });\n\n  React.useEffect(() => {\n    window.setInterval(() => {\n      spinnerSet((sp) => {\n        if (sp.rotation > 0) {\n          const out = {\n            ...sp,\n          };\n          out.rotation -= 1;\n          out.selectedIndex = out.selectedIndex + 1;\n          out.selected =\n            out.selectedImages[out.selectedIndex % out.selectedImages.length];\n          return out;\n        }\n        return sp;\n      });\n    }, 750);\n  }, []);\n\n  return (\n    <div\n      style={{\n        margin: \"1em\",\n      }}\n    >\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(2, 1fr)\",\n          width: \"100%\",\n        }}\n      >\n        {images.map((img) => (\n          <div\n            style={{\n              textAlign: \"center\",\n            }}\n            key={img}\n          >\n            <img\n              src={img}\n              style={{\n                opacity: spinner.selectedImages.includes(img) ? 1 : 0.2,\n                margin: \"0.25em\",\n                borderRadius: \"1em\",\n                backgroundColor: spinner.selected === img ? \"lightblue\" : null,\n                padding: \"0.75em\",\n              }}\n              onClick={() => {\n                const selectedImages = spinner.selectedImages.includes(img)\n                  ? spinner.selectedImages.filter((i) => i !== img)\n                  : [...spinner.selectedImages, img];\n                spinnerSet({\n                  ...spinner,\n                  selectedImages,\n                });\n              }}\n            />\n          </div>\n        ))}\n      </div>\n      <button\n        style={{\n          width: \"100%\",\n          fontSize: \"xx-large\",\n          padding: \"0.5em\",\n          borderRadius: \"0.5em\",\n          border: 0,\n          backgroundColor: \"coral\",\n          marginTop: \"0.5em\",\n        }}\n        onClick={() => {\n          spinnerSet({\n            ...spinner,\n            rotation: Math.floor(Math.random() * 20 + 5),\n            selectedIndex: Math.floor(\n              Math.random() * spinner.selectedImages.length\n            ),\n          });\n        }}\n      >\n        Choose\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}